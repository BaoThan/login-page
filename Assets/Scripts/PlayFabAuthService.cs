using UnityEngine;
using PlayFab;
using PlayFab.ClientModels;
using System;

public enum AuthTypes
{
    None,
    AutoAuthenticate,
    EmailAndPassword,
    SignUp,
    Guest
}

public class PlayFabAuthService
{
    public static event Action OnDisplayAuthentication;
    public static event Action<LoginResult> OnLoginSuccess;
    public static event Action<PlayFabError> OnPlayFabError;

    public string Email { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }
    public GetPlayerCombinedInfoRequestParams InfoRequestParams { get; set; }

    public bool ForceLink { get; set; } = false;

    public static string PlayFabId { get { return _playFabId; } }
    private static string _playFabId;

    public static string SessionTicket { get { return _sessionTicket; } }
    private static string _sessionTicket;

    private const string _LoginRememberKey = "PlayFabLoginRemember";
    private const string _PlayFabRememberMeIdKey = "PlayFabIdPassGuid";
    private const string _PlayFabAuthTypeKey = "PlayFabAuthType";

    private static PlayFabAuthService _instance;
    public static PlayFabAuthService Instance => _instance ??= new PlayFabAuthService();

    public bool RememberMe
    {
        get => PlayerPrefs.GetInt(_LoginRememberKey, 0) != 0;
        set => PlayerPrefs.SetInt(_LoginRememberKey, value ? 1 : 0);
    }

    public AuthTypes AuthType
    {
        get => (AuthTypes)PlayerPrefs.GetInt(_PlayFabAuthTypeKey, 0);
        set => PlayerPrefs.SetInt(_PlayFabAuthTypeKey, (int)value);
    }

    private string RememberMeId
    {
        get => PlayerPrefs.GetString(_PlayFabRememberMeIdKey, "");
        set
        {
            var guid = value ?? Guid.NewGuid().ToString();
            PlayerPrefs.SetString(_PlayFabRememberMeIdKey, guid);
        }
    }

    public void ClearRememberMe()
    {
        PlayerPrefs.DeleteKey(_LoginRememberKey);
        PlayerPrefs.DeleteKey(_PlayFabRememberMeIdKey);
        PlayerPrefs.DeleteKey(_PlayFabAuthTypeKey);
    }

    public void Authenticate(AuthTypes authType)
    {
        AuthType = authType;
        Authenticate();
    }

    public void Authenticate()
    {
        switch (AuthType)
        {
            case AuthTypes.None:
                OnDisplayAuthentication?.Invoke();
                break;

            case AuthTypes.AutoAuthenticate:
                SilentlyAuthenticate();
                break;

            case AuthTypes.EmailAndPassword:
                AuthenticateEmailPassword();
                break;

            case AuthTypes.SignUp:
                SignUpProgress();
                break;
        }
    }

    private void AuthenticateEmailPassword()
    {
        if (RememberMe && !string.IsNullOrEmpty(RememberMeId))
        {
            // If being remembered, log in with a custom_id generated by RememberMeId()
            PlayFabClientAPI.LoginWithCustomID(
                new LoginWithCustomIDRequest()
                {
                    TitleId = PlayFabSettings.TitleId,
                    CustomId = RememberMeId,
                    CreateAccount = true,
                    InfoRequestParameters = InfoRequestParams
                },

                result =>
                {
                    _playFabId = result.PlayFabId;
                    _sessionTicket = result.SessionTicket;
                    OnLoginSuccess?.Invoke(result);
                },
                error => OnPlayFabError?.Invoke(error)
                );
            return;
        }

        if (string.IsNullOrEmpty(Email) && string.IsNullOrEmpty(Password))
        {
            OnDisplayAuthentication.Invoke();
            return;
        }

        PlayFabClientAPI.LoginWithEmailAddress(
            new LoginWithEmailAddressRequest()
            {
                TitleId = PlayFabSettings.TitleId,
                Email = Email,
                Password = Password,
                InfoRequestParameters = InfoRequestParams
            },

            result =>
            {
                _playFabId = result.PlayFabId;
                _sessionTicket = result.SessionTicket;

                if (RememberMe)
                {
                    RememberMeId = Guid.NewGuid().ToString();
                    AuthType = AuthTypes.EmailAndPassword;

                    PlayFabClientAPI.LinkCustomID(
                        new LinkCustomIDRequest
                        {
                            CustomId = RememberMeId,
                            ForceLink = ForceLink
                        }, null, null
                    );
                }
                OnLoginSuccess?.Invoke(result);
            },
            error =>
            {
                OnPlayFabError?.Invoke(error);
                Debug.LogError(error.GenerateErrorReport());
            });
    }

    private void SignUpProgress()
    {
        SilentlyAuthenticate(
            result =>
            {
                if (result == null)
                {
                    OnPlayFabError.Invoke(new PlayFabError()
                    {
                        Error = PlayFabErrorCode.UnknownError,
                        ErrorMessage = "Silent Authentication by Device failed"
                    });
                    return;
                }

                UserNameExists(result.PlayFabId, exists =>
                {
                    if (exists)
                    {
                        CreateAccount();
                    }
                    else
                    {
                        AddAccountAndPassword(result);
                    }
                });
            });
    }
    private void AddAccountAndPassword(LoginResult result)
    {
        PlayFabClientAPI.AddUsernamePassword(
            new AddUsernamePasswordRequest()
            {
                // Because it is required & Unique and not supplied by User.
                Username = Username ?? result.PlayFabId,
                Email = Email,
                Password = Password,
            },

            addResult =>
            {
                if (OnLoginSuccess != null)
                {
                    _playFabId = result.PlayFabId;
                    _sessionTicket = result.SessionTicket;

                    if (RememberMe)
                    {
                        RememberMeId = Guid.NewGuid().ToString();

                        PlayFabClientAPI.LinkCustomID(
                            new LinkCustomIDRequest()
                            {
                                CustomId = RememberMeId,
                                ForceLink = ForceLink
                            }, null, null
                        );
                    }
                    AuthType = AuthTypes.EmailAndPassword;
                    OnLoginSuccess.Invoke(result);
                }
            },

            error =>
            {
                OnPlayFabError?.Invoke(error);
                AuthType = AuthTypes.None;
            });

    }

    private void UserNameExists(string username, Action<bool> callback)
    {
        PlayFabClientAPI.GetAccountInfo(new GetAccountInfoRequest()
        {
            Username = username
        },
        result => callback?.Invoke(true),
        error => callback?.Invoke(false));
    }

    private void CreateAccount()
    {
        PlayFabClientAPI.RegisterPlayFabUser(new RegisterPlayFabUserRequest()
        {
            Email = Email,
            Password = Password,
            RequireBothUsernameAndEmail = false
        },
        OnSuccess =>
        {
            Debug.Log("Account created successfully!");
            AuthenticateEmailPassword();
        },
        OnError => Debug.LogError("Error creating account: " + OnError.GenerateErrorReport())
        );
    }

    public void SendRecoveryEmail(Action<string> onSuccess, Action<string> onError)
    {
        PlayFabClientAPI.SendAccountRecoveryEmail(new SendAccountRecoveryEmailRequest()
        {
            Email = Email,
            TitleId = PlayFabSettings.TitleId,
        },
        success => onSuccess?.Invoke("Recovery email sent successfully."),
        error => onError?.Invoke($"Error sending recovery email: {error.GenerateErrorReport()}")
        );
    }


    private void SilentlyAuthenticate(System.Action<LoginResult> callback = null)
    {
#if UNITY_ANDROID  && !UNITY_EDITOR

        AndroidJavaClass up = new AndroidJavaClass("com.unity3d.player.UnityPlayer");
        AndroidJavaObject currentActivity = up.GetStatic<AndroidJavaObject>("currentActivity");
        AndroidJavaObject contentResolver = currentActivity.Call<AndroidJavaObject>("getContentResolver");
        AndroidJavaClass secure = new AndroidJavaClass("android.provider.Settings$Secure");
        string deviceId = secure.CallStatic<string>("getString", contentResolver, "android_id");

        PlayFabClientAPI.LoginWithAndroidDeviceID(new LoginWithAndroidDeviceIDRequest() {
            TitleId = PlayFabSettings.TitleId,
            AndroidDevice = SystemInfo.deviceModel,
            OS = SystemInfo.operatingSystem,
            AndroidDeviceId = deviceId,
            CreateAccount = true,
            InfoRequestParameters = InfoRequestParams
        }, (result) => {
            _playFabId = result.PlayFabId;
            _sessionTicket = result.SessionTicket;

            if (callback == null && OnLoginSuccess != null)
            {
                OnLoginSuccess.Invoke(result);
            }else if (callback != null)
            {
                callback.Invoke(result);
            }
        }, (error) => {

            if(callback == null && OnPlayFabError != null){
                OnPlayFabError.Invoke(error);
            }else{
                callback.Invoke(null);
                Debug.LogError(error.GenerateErrorReport());
            }
        });

#elif  UNITY_IPHONE || UNITY_IOS && !UNITY_EDITOR
        PlayFabClientAPI.LoginWithIOSDeviceID(new LoginWithIOSDeviceIDRequest()
        {
            TitleId = PlayFabSettings.TitleId,
            DeviceModel = SystemInfo.deviceModel,
            OS = SystemInfo.operatingSystem,
            DeviceId = SystemInfo.deviceUniqueIdentifier,
            CreateAccount = true,
            InfoRequestParameters = InfoRequestParams
        }, (result) =>
        {
            _playFabId = result.PlayFabId;
            _sessionTicket = result.SessionTicket;

            if (callback == null && OnLoginSuccess != null)
            {
                OnLoginSuccess.Invoke(result);
            }
            else
            {
                callback?.Invoke(result);
            }
        }, (error) =>
        {
            if (callback == null && OnPlayFabError != null)
            {
                OnPlayFabError.Invoke(error);
            }
            else
            {
                callback.Invoke(null);
                Debug.LogError(error.GenerateErrorReport());
            }
        });
#else
        PlayFabClientAPI.LoginWithCustomID(new LoginWithCustomIDRequest()
        {
            TitleId = PlayFabSettings.TitleId,
            CustomId = SystemInfo.deviceUniqueIdentifier,
            CreateAccount = true,
            InfoRequestParameters = InfoRequestParams
        }, (result) => {
            _playFabId = result.PlayFabId;
            _sessionTicket = result.SessionTicket;

            if (callback == null && OnLoginSuccess != null)
            {
                OnLoginSuccess.Invoke(result);
            }
            else if (callback != null)
            {
                callback.Invoke(result);
            }
        }, (error) => {
            if (callback == null && OnPlayFabError != null)
            {
                OnPlayFabError.Invoke(error);
            }
            else
            {
                callback.Invoke(null);
                Debug.LogError(error.GenerateErrorReport());
            }

        });
#endif
    }

    public void UnlinkDeviceID()
    {
        SilentlyAuthenticate((result) =>
        {

#if UNITY_ANDROID && !UNITY_EDITOR
            AndroidJavaClass up = new AndroidJavaClass("com.unity3d.player.UnityPlayer");
            AndroidJavaObject currentActivity = up.GetStatic<AndroidJavaObject>("currentActivity");
            AndroidJavaObject contentResolver = currentActivity.Call<AndroidJavaObject>("getContentResolver");
            AndroidJavaClass secure = new AndroidJavaClass("android.provider.Settings$Secure");
            string deviceId = secure.CallStatic<string>("getString", contentResolver, "android_id");

            PlayFabClientAPI.UnlinkAndroidDeviceID(new UnlinkAndroidDeviceIDRequest() {
                AndroidDeviceId = deviceId
            }, null, null);

#elif UNITY_IPHONE || UNITY_IOS && !UNITY_EDITOR
            PlayFabClientAPI.UnlinkIOSDeviceID(new UnlinkIOSDeviceIDRequest()
            {
                DeviceId = SystemInfo.deviceUniqueIdentifier
            }, null, null);
#else
            PlayFabClientAPI.UnlinkCustomID(new UnlinkCustomIDRequest()
            {
                CustomId = SystemInfo.deviceUniqueIdentifier
            }, null, null);
#endif

        });
    }
}

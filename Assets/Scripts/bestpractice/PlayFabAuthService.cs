// using System;
// using System.Collections.Generic;
// using System.Xml.Serialization;
// using PlayFab;
// using PlayFab.ClientModels;
// using UnityEngine;



// public enum AuthTypes {
//     None,
//     AutoAuthenticate,
//     EmailAndPassword,
//     AppleLogin,
//     GoogleLogin,
//     SignUp,
// }

// public class PlayFabAuthService123 {

//     // Event for UI subcribers
//     public static event Action OnDisplayAuthentication;
//     public static event Action<LoginResult> OnLoginSuccess;
//     public static event Action<PlayFabError> OnPlayFabError;

//     // Accessbility for PlayFab ID & Session Tickets
//     private static string _playFabId;
//     private static string _sessionTicket;

//     // Keys for player preferences
//     private const string _loginRememberKey = "PlayFabLoginRemember";
//     private const string _playFabRememberMeIdKey = "PlayFabIdPassGuid";
//     private const string _playFabAuthTypeKey = "PlayFabAuthType";

//     // Properties
//     public AuthTypes AuthType { get; set;}
//     public string Username { get; set;}
//     public string Email { get; set;}
//     public string Password {get; set;}
//     public GetPlayerCombinedInfoRequestParams InfoRequestParams { get; set; }
//     public bool ForceLink { get; set;}

//     // Service singleton instance
//     private static PlayFabAuthService _instance;
//     public static PlayFabAuthService Instance => _instance ??= new PlayFabAuthService();

//     // RememberMe property
//     public bool RememberMe {
//         get => PlayerPrefs.GetInt(_loginRememberKey, 0) == 1;
//         set => PlayerPrefs.GetInt(_loginRememberKey, value ? 1 : 0);
//     }

//     // RememberMeId property
//     private string RememberMeId {
//         get => PlayerPrefs.GetString(_playFabRememberMeIdKey, Guid.NewGuid().ToString());
//         set => PlayerPrefs.GetString(_playFabRememberMeIdKey, value);
//     }

//     public void ClearRememberMe() {
//         PlayerPrefs.DeleteKey(_loginRememberKey);
//         PlayerPrefs.DeleteKey(_playFabRememberMeIdKey);
//         PlayerPrefs.DeleteKey(_playFabAuthTypeKey);
//     }

//     /// <summary>
//     /// Kick off the authentication process by specific authtype.
//     /// </summary>
//     /// <param name="authType"></param>
//     public void Authenticate(AuthTypes authType = AuthTypes.None) {
//         AuthType = authType != AuthTypes.None ? authType : AuthType;
//         switch(AuthType) {
//             case AuthTypes.None:
//                 OnDisplayAuthentication?.Invoke();
//                 break;

//             case AuthTypes.AutoAuthenticate:
//                 AutoAuthenticate();
//                 break;

//             case AuthTypes.EmailAndPassword:
//                 AuthenticateEmailPassword();
//                 break;
            
//             case AuthTypes.AppleLogin:
//                 // AuthenticateApple();
//                 break;

//             case AuthTypes.GoogleLogin:
//                 // AuthenticateGoogle();
//                 break;

//             case AuthTypes.SignUp:
//                 SignUp();
//                 break;
//         }
//     }

//     // public void AuthenticateApple() {
//     //     // Call Apple Login plugin to get the IdentityToken
//     //     string identityToken = AppleAuthPlugin.GetAppleIdentityToken();

//     //     if (string.IsNullOrEmpty(identityToken)) {
//     //         OnDisplayAuthentication?.Invoke();
//     //         return;
//     //     }

//     //     PlayFabClientAPI.LoginWithApple(
//     //         new LoginWithAppleRequest {
//     //             TitleId = PlayFabSettings.TitleId,
//     //             IdentityToken = identityToken,
//     //             CreateAccount = true,
//     //             InfoRequestParameters = InfoRequestParams
//     //         },
//     //         result => {
//     //             _playFabId = result.PlayFabId;
//     //             _sessionTicket = result.SessionTicket;
//     //             OnLoginSuccess?.Invoke(result);
//     //         },
//     //         error => OnPlayFabError?.Invoke(error)
//     //     );
//     // }


//     public void AuthenticateEmailPassword() {
//         if (RememberMe && !string.IsNullOrEmpty(RememberMeId)) {
//             // If the user is being remembered,
//             // login with customId generated by RememberMeId;
//             PlayFabClientAPI.LoginWithCustomID(
//                 new LoginWithCustomIDRequest() {
//                     TitleId = PlayFabSettings.TitleId,
//                     CustomId = RememberMeId,
//                     CreateAccount = true,
//                     InfoRequestParameters = InfoRequestParams
//                 },
//                 result => {
//                     _playFabId = result.PlayFabId;
//                     _sessionTicket = result.SessionTicket;
//                     OnLoginSuccess?.Invoke(result);
//                     LinkCustomIdIfRememberMe();
//                 },
//                 error => OnPlayFabError?.Invoke(error)
//             );
//         } else if (!string.IsNullOrEmpty(Email) && !string.IsNullOrEmpty(Password)) {
//             PlayFabClientAPI.LoginWithEmailAddress (
//                 new LoginWithEmailAddressRequest () {
//                     TitleId = PlayFabSettings.TitleId,
//                     Email = Email,
//                     Password = Password,
//                 },
//                 // Success
//                 result => {
//                     _playFabId = result.PlayFabId;
//                     _sessionTicket = result.SessionTicket;
//                     OnLoginSuccess?.Invoke(result);
//                 },
//                 // Error
//                 error => OnPlayFabError?.Invoke(error)
//             );
//         } else {
//             OnDisplayAuthentication?.Invoke();
//         }
//     }

    

//     /// <summary>
//     /// Register a user with an Email & Password
//     /// Note: We are not using the RegisterPlayFab API
//     /// </summary>
//     public void SignUp() {
//         // Any time we attempt to register a player, first silently authenticate the player.
//         // This will retain the players True Origination (Android, iOS, Desktop).
//         AutoAuthenticate(
//             result => {
//                 PlayFabClientAPI.AddUsernamePassword(
//                     new AddUsernamePasswordRequest() {
//                         Username = Username ?? result.PlayFabId,
//                         Email = Email,
//                         Password = Password,
//                     },
//                     addResult => {
//                         _playFabId = result.PlayFabId;
//                         _sessionTicket =result.SessionTicket;
//                         OnLoginSuccess?.Invoke(result);
//                         LinkCustomIdIfRememberMe();
//                     },
//                     error => OnPlayFabError?.Invoke(error)
//                 );
//             }
//         );
//     }

//     private void LinkCustomIdIfRememberMe() {
//         if (RememberMe) {
//             RememberMeId = Guid.NewGuid().ToString();
//             AuthType = AuthTypes.EmailAndPassword;
//             PlayFabClientAPI.LinkCustomID(
//                 new LinkCustomIDRequest {
//                     CustomId = RememberMeId,
//                     ForceLink = ForceLink
//                 },
//                 null,
//                 null
//             );
//         }
//     }

//     private void AutoAuthenticate(Action<LoginResult> callback = null)
//     {
//         string deviceId = SystemInfo.deviceUniqueIdentifier;
//         string deviceModel = SystemInfo.deviceModel;
//         string operatingSystem = SystemInfo.operatingSystem;

// #if UNITY_ANDROID && !UNITY_EDITOR
//     AndroidJavaClass up = new AndroidJavaClass("com.unity3d.player.UnityPlayer");
//     AndroidJavaObject currentActivity = up.GetStatic<AndroidJavaObject>("currentActivity");
//     AndroidJavaObject contentResolver = currentActivity.Call<AndroidJavaObject>("getContentResolver");
//     AndroidJavaClass secure = new AndroidJavaClass("android.provider.Settings$Secure");
//     deviceId = secure.CallStatic<string>("getString", contentResolver, "android_id");

//     PlayFabClientAPI.LoginWithAndroidDeviceID(new LoginWithAndroidDeviceIDRequest() {
//         TitleId = PlayFabSettings.TitleId,
//         AndroidDevice = deviceModel,
//         OS = operatingSystem,
//         AndroidDeviceId = deviceId,
//         CreateAccount = true,
//         InfoRequestParameters = InfoRequestParams
//     },
//     result =>
//     {
//         // Store identity and session
//         _playFabId = result.PlayFabId;
//         _sessionTicket = result.SessionTicket;

//         // Check if we want to get this callback directly or send to event subscribers.
//         if (callback == null && OnLoginSuccess != null)
//         {
//             OnLoginSuccess.Invoke(result);
//         }
//         else
//         {
//             callback?.Invoke(result);
//         }
//     },
//     error =>
//     {
//         if (callback == null && OnPlayFabError != null)
//         {
//             OnPlayFabError.Invoke(error);
//         }
//         else
//         {
//             callback?.Invoke(null);
//             Debug.LogError(error.GenerateErrorReport());
//         }
//     });

// #elif UNITY_IPHONE || UNITY_IOS && !UNITY_EDITOR
//     PlayFabClientAPI.LoginWithIOSDeviceID(new LoginWithIOSDeviceIDRequest()
//     {
//         TitleId = PlayFabSettings.TitleId,
//         DeviceModel = deviceModel,
//         OS = operatingSystem,
//         DeviceId = deviceId,
//         CreateAccount = true,
//         InfoRequestParameters = InfoRequestParams
//     },
//     result =>
//     {
//         // Store identity and session
//         _playFabId = result.PlayFabId;
//         _sessionTicket = result.SessionTicket;

//         // Check if we want to get this callback directly or send to event subscribers.
//         if (callback == null && OnLoginSuccess != null)
//         {
//             OnLoginSuccess.Invoke(result);
//         }
//         else
//         {
//             callback?.Invoke(result);
//         }
//     },
//     error =>
//     {
//         if (callback == null && OnPlayFabError != null)
//         {
//             OnPlayFabError.Invoke(error);
//         }
//         else
//         {
//             callback?.Invoke(null);
//             Debug.LogError(error.GenerateErrorReport());
//         }
//     });

// #else
//     // Fallback to custom ID login
//     PlayFabClientAPI.LoginWithCustomID(new LoginWithCustomIDRequest()
//     {
//         TitleId = PlayFabSettings.TitleId,
//         CustomId = deviceId,
//         CreateAccount = true,
//         InfoRequestParameters = InfoRequestParams
//     },
//     result =>
//     {
//         // Store identity and session
//         _playFabId = result.PlayFabId;
//         _sessionTicket = result.SessionTicket;

//         // Check if we want to get this callback directly or send to event subscribers.
//         if (callback == null && OnLoginSuccess != null)
//         {
//             OnLoginSuccess.Invoke(result);
//         }
//         else
//         {
//             callback?.Invoke(result);
//         }
//     },
//     error =>
//     {
//         if (callback == null && OnPlayFabError != null)
//         {
//             OnPlayFabError.Invoke(error);
//         }
//         else
//         {
//             callback?.Invoke(null);
//             Debug.LogError(error.GenerateErrorReport());
//         }
//     });
// #endif
// }


//     public void UnlinkAutoAuth()
//     {
//         AutoAuthenticate(result =>
//         {
//             string deviceId = SystemInfo.deviceUniqueIdentifier;

// #if UNITY_ANDROID && !UNITY_EDITOR
//             AndroidJavaClass up = new AndroidJavaClass("com.unity3d.player.UnityPlayer");
//             AndroidJavaObject currentActivity = up.GetStatic<AndroidJavaObject>("currentActivity");
//             AndroidJavaObject contentResolver = currentActivity.Call<AndroidJavaObject>("getContentResolver");
//             AndroidJavaClass secure = new AndroidJavaClass("android.provider.Settings$Secure");
//             deviceId = secure.CallStatic<string>("getString", contentResolver, "android_id");

//             PlayFabClientAPI.UnlinkAndroidDeviceID(new UnlinkAndroidDeviceIDRequest()
//             {
//                 AndroidDeviceId = deviceId
//             },
//             null,
//             null);
        
// #elif UNITY_IPHONE || UNITY_IOS && !UNITY_EDITOR
//             PlayFabClientAPI.UnlinkIOSDeviceID(new UnlinkIOSDeviceIDRequest()
//             {
//                 DeviceId = SystemInfo.deviceUniqueIdentifier
//             },
//             null,
//             null);
        
// #else
//             PlayFabClientAPI.UnlinkCustomID(new UnlinkCustomIDRequest()
//             {
//                 CustomId = SystemInfo.deviceUniqueIdentifier
//             },
//             null,
//             null);
// #endif
//     });
// }

//     public void Logout() {
//         _playFabId = null;
//         _sessionTicket = null;

//         PlayFabClientAPI.ForgetAllCredentials();
//         ClearRememberMe();
//         Debug.Log("User logged out successfully");
//     }

// }